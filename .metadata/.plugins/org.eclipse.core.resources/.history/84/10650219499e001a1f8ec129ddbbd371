package com.hotalAdmin.hta.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hotalAdmin.hta.model.Hospede;
import com.hotalAdmin.hta.repository.HospedeRepository;

@RestController
@RequestMapping("/hotelAdmin")
public class HospedeController {

	@Autowired
	private HospedeRepository guestRepository;

	@GetMapping("/getGuests")
	public Page<Hospede> getGuests(Pageable pageable) {
		return guestRepository.findAll(pageable);
	}
	
	@GetMapping("/getGuest/{guestId}")
	public Hospede getGuest(@PathVariable Long guestId) {
		return guestRepository.findById(guestId).get();
	}

	@PostMapping("/createGuests")
	public Hospede createGuests(@RequestBody Hospede guest) {
		return guestRepository.save(guest);
	}

	@PutMapping("/updadeGuest/{guestId}")
	public Hospede updadeGuest(@PathVariable Long guestId, @RequestBody Hospede updatedGuest) throws Exception {
		return guestRepository.findById(guestId).map(guest -> {
			guest.setNome(updatedGuest.getNome());
			guest.setDocumento(updatedGuest.getDocumento());
			guest.setTelefone(updatedGuest.getTelefone());
			guestRepository.save(guest);
			return guest;
		}).orElseThrow(() -> new Exception("NOT FOUND"));

	}

	@DeleteMapping("/deleteGuest/{guestId}")
	public ResponseEntity<?> deleteGuest(@PathVariable Long guestId) {
		return guestRepository.findById(guestId).map(guest -> {
			guestRepository.delete(guest);
			return ResponseEntity.ok().build();
		}).orElse(ResponseEntity.notFound().build());
	}

}
